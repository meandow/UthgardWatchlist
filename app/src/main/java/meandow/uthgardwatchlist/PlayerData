package productdesign.vce.volvoremote.fragments.worklight;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by a229302 on 2017-03-20.
 */

public class ZoneData {
    public List<Zone> Zones;
    public final String PrefKey = "ZoneData";
    public final String ZonesKey = "ZoneData.Zones";
    public final int TOP_LEFT = 0;
    public final int TOP_RIGHT = 1;
    public final int BOTTOM_LEFT = 2;
    public final int BOTTOM_RIGHT = 3;


    public void setMeshId(byte newMeshId, int position) {
        switch (position) {
            case TOP_LEFT:
                for (Zone z : Zones) {
                    z.TopLeft.MeshId = newMeshId;
                }
                break;
            case TOP_RIGHT:
                for (Zone z : Zones) {
                    z.TopRight.MeshId = newMeshId;
                }
                break;
            case BOTTOM_LEFT:
                for (Zone z : Zones) {
                    z.BottomLeft.MeshId = newMeshId;
                }
                break;
            case BOTTOM_RIGHT:
                for (Zone z : Zones) {
                    z.BottomRight.MeshId = newMeshId;
                }
                break;
            default:
                throw new IllegalArgumentException("set mesh id position");
        }
    }

    private ZoneData(Context context) {
        //TODO: Load from shared prefs
        SharedPreferences prefs = context.getSharedPreferences(PrefKey, 0);
        String zones = prefs.getString(ZonesKey, null);
        // First time?
        if (zones == null) {
            Zones = getDefaultZones();
            return;
        }
        Gson gson = new Gson();
        Type listType = new TypeToken<List<Zone>>() {
        }.getType();
        try {
            Zones = gson.fromJson(zones, listType);
        } catch (Throwable tr) {
            Log.e("ZoneData", "Failed to parse json, due to " + tr, tr);
            Zones = getDefaultZones();
        }
    }

    public void save(Context context) {
        Gson gson = new Gson();
        String zonesString = gson.toJson(Zones);
        SharedPreferences prefs = context.getSharedPreferences(PrefKey, 0);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putString(ZonesKey, zonesString);
        editor.commit();
    }

    private static ZoneData mInstance;

    public static ZoneData getInstance(Context context) {
        if (mInstance == null) {
            synchronized (ZoneData.class) {
                if (mInstance == null) {
                    mInstance = new ZoneData(context);
                }
            }
        }
        return mInstance;
    }

    private List<Zone> getDefaultZones() {
        List<Zone> zones = new ArrayList<>();

        // z1
        Zone z1 = new Zone();
        ZoneSetting zs1tl = new ZoneSetting();
        zs1tl.MeshId = (byte) 0x13;
        zs1tl.Dim = 0.1;
        z1.TopLeft = zs1tl;
        ZoneSetting zs1tr = new ZoneSetting();
        zs1tr.MeshId = (byte) 0x13;
        zs1tr.Dim = 0.3;
        z1.TopRight = zs1tr;
        ZoneSetting zs1bl = new ZoneSetting();
        zs1bl.MeshId = (byte) 0x13;
        zs1bl.Dim = 0.5;
        z1.BottomLeft = zs1bl;
        ZoneSetting zs1br = new ZoneSetting();
        zs1br.MeshId = (byte) 0x13;
        zs1br.Dim = 0.9;
        z1.BottomRight = zs1br;
        zones.add(z1);

        // z2
        Zone z2 = new Zone();
        ZoneSetting zs2tl = new ZoneSetting();
        zs2tl.MeshId = (byte) 0x10;
        zs2tl.Dim = 0.1;
        z2.TopLeft = zs2tl;
        ZoneSetting zs2tr = new ZoneSetting();
        zs2tr.MeshId = (byte) 0x10;
        zs2tr.Dim = 0.3;
        z2.TopRight = zs2tr;
        ZoneSetting zs2bl = new ZoneSetting();
        zs2bl.MeshId = (byte) 0x10;
        zs2bl.Dim = 0.5;
        z2.BottomLeft = zs2bl;
        ZoneSetting zs2br = new ZoneSetting();
        zs2br.MeshId = (byte) 0x10;
        zs2br.Dim = 0.9;
        z2.BottomRight = zs2br;
        zones.add(z2);

        // z3
        Zone z3 = new Zone();
        ZoneSetting zs3tl = new ZoneSetting();
        zs3tl.MeshId = (byte) 0x13;
        zs3tl.Dim = 0.1;
        z3.TopLeft = zs3tl;
        ZoneSetting zs3tr = new ZoneSetting();
        zs3tr.MeshId = (byte) 0x13;
        zs3tr.Dim = 0.3;
        z3.TopRight = zs3tr;
        ZoneSetting zs3bl = new ZoneSetting();
        zs3bl.MeshId = (byte) 0x13;
        zs3bl.Dim = 0.5;
        z3.BottomLeft = zs3bl;
        ZoneSetting zs3br = new ZoneSetting();
        zs3br.MeshId = (byte) 0x13;
        zs3br.Dim = 0.9;
        z3.BottomRight = zs3br;
        zones.add(z3);

        // z4
        Zone z4 = new Zone();
        ZoneSetting zs4tl = new ZoneSetting();
        zs4tl.MeshId = (byte) 0x13;
        zs4tl.Dim = 0.1;
        z4.TopLeft = zs4tl;
        ZoneSetting zs4tr = new ZoneSetting();
        zs4tr.MeshId = (byte) 0x13;
        zs4tr.Dim = 0.3;
        z4.TopRight = zs4tr;
        ZoneSetting zs4bl = new ZoneSetting();
        zs4bl.MeshId = (byte) 0x13;
        zs4bl.Dim = 0.5;
        z4.BottomLeft = zs4bl;
        ZoneSetting zs4br = new ZoneSetting();
        zs4br.MeshId = (byte) 0x13;
        zs4br.Dim = 0.9;
        z4.BottomRight = zs4br;
        zones.add(z4);

        return zones;
    }

}
